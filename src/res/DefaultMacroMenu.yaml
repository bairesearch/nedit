---
name: Complete Word
shortcut: Alt+D
command: |
  # This macro attempts to complete the current word by
  # finding another word in the same document that has
  # the same prefix; repeated invocations of the macro
  # (by repeated typing of its accelerator, say) cycles
  # through the alternatives found.
  # 
  # Make sure $compWord contains something (a dummy index)
  $compWord[""] = ""
  
  # Test whether the rest of $compWord has been initialized:
  # this avoids having to initialize the global variable
  # $compWord in an external macro file
  if (!("wordEnd" in $compWord)) {
      # we need to initialize it
      $compWord["wordEnd"] = 0
      $compWord["repeat"] = 0
      $compWord["init"] = 0
      $compWord["wordStart"] = 0
  }
  
  if ($compWord["wordEnd"] == $cursor) {
          $compWord["repeat"] += 1
  }
  else {
     $compWord["repeat"] = 1
     $compWord["init"] = $cursor
  
     # search back to a word boundary to find the word to complete
     # (we use \w here to allow for programming "words" that can include
     # digits and underscores; use \l for letters only)
     $compWord["wordStart"] = search("<\\w+", $cursor, "backward", "regex", "wrap")
  
     if ($compWord["wordStart"] == -1)
        return
  
      if ($search_end == $cursor)
         $compWord["word"] = get_range($compWord["wordStart"], $cursor)
      else
          return
  }
  s = $cursor
  for (i=0; i <= $compWord["repeat"]; i++)
      s = search($compWord["word"], s - 1, "backward", "regex", "wrap")
  
  if (s == $compWord["wordStart"]) {
     beep()
     $compWord["repeat"] = 0
     s = $compWord["wordStart"]
     se = $compWord["init"]
  }
  else
     se = search(">", s, "regex")
  
  replace_range($compWord["wordStart"], $cursor, get_range(s, se))
  
  $compWord["wordEnd"] = $cursor
  
---
name: Fill Sel. w/Char
input: selection
command: |
  # This macro replaces each character position in
  # the selection with the string typed into the dialog
  # it displays.
  if ($selection_start == -1) {
      beep()
      return
  }
  
  # Ask the user what character to fill with
  fillChar = string_dialog("Fill selection with what character?", \
                           "OK", "Cancel")
  if ($string_dialog_button == 2 || $string_dialog_button == 0)
      return
  
  # Count the number of lines (NL characters) in the selection
  # (by removing all non-NLs in selection and counting the remainder)
  nLines = length(replace_in_string(get_selection(), \
                                    "^.*$", "", "regex"))
  
  rectangular = $selection_left != -1
  
  # work out the pieces of required of the replacement text
  # this will be top mid bot where top is empty or ends in NL,
  # mid is 0 or more lines of repeats ending with NL, and
  # bot is 0 or more repeats of the fillChar
  
  toplen = -1 # top piece by default empty (no NL)
  midlen = 0
  botlen = 0
  
  if (rectangular) {
      # just fill the rectangle:  mid\n \ nLines
      #                           mid\n /
      #                           bot   - last line with no nl
      midlen = $selection_right -  $selection_left
      botlen = $selection_right -  $selection_left
  } else {
      #                  |col[0]
      #         .........toptoptop\n                      |col[0]
      # either  midmidmidmidmidmid\n \ nLines - 1   or ...botbot...
      #         midmidmidmidmidmid\n /                          |col[1]
      #         botbot...         |
      #                 |col[1]   |wrap margin
      # we need column positions col[0], col[1] of selection start and
      # end (use a loop and arrays to do the two positions)
      sel[0] = $selection_start
      sel[1] = $selection_end
  
      # col[0] = pos_to_column($selection_start)
      # col[1] = pos_to_column($selection_end)
  
      for (i = 0; i < 2; ++i) {
          end = sel[i]
          pos = search("^", end, "regex", "backward")
          thisCol = 0
          while (pos < end) {
              nexttab = search("\t", pos)
              if (nexttab < 0 || nexttab >= end) {
                  thisCol += end - pos # count remaining non-tabs
                  nexttab = end
              } else {
                  thisCol += nexttab - pos + $tab_dist
                  thisCol -= (thisCol % $tab_dist)
              }
              pos = nexttab + 1 # skip past the tab or end
          }
          col[i] = thisCol
      }
      toplen = max($wrap_margin - col[0], 0)
      botlen = min(col[1], $wrap_margin)
  
      if (nLines == 0) {
          toplen = -1
          botlen = max(botlen - col[0], 0)
      } else {
          midlen = $wrap_margin
          if (toplen < 0)
              toplen = 0
          nLines-- # top piece will end in a NL
      }
  }
  
  # Create the fill text
  # which is the longest piece? make a line of that length
  # (use string doubling - this allows the piece to be
  # appended to double in size at each iteration)
  
  len = max(toplen, midlen, botlen)
  charlen = length(fillChar) # maybe more than one char given!
  
  line = ""
  while (len > 0) {
      if (len % 2)
          line = line fillChar
      len /= 2
      if (len > 0)
          fillChar = fillChar fillChar
  }
  # assemble our pieces
  toppiece = ""
  midpiece = ""
  botpiece = ""
  if (toplen >= 0)
      toppiece = substring(line, 0, toplen * charlen) "\n"
  if (botlen > 0)
      botpiece = substring(line, 0, botlen * charlen)
  
  # assemble midpiece (use doubling again)
  line = substring(line, 0, midlen * charlen) "\n"
  while (nLines > 0) {
      if (nLines % 2)
          midpiece = midpiece line
      nLines /= 2
      if (nLines > 0)
          line = line line
  }
  # Replace the selection with the complete fill text
  replace_selection(toppiece midpiece botpiece)
  
---
name: Quote Mail Reply
command: |
  if ($selection_start == -1)
      replace_all("^.*$", "\\> &", "regex")
  else
      replace_in_selection("^.*$", "\\> &", "regex")
  
---
name: Unquote Mail Reply
command: |
  if ($selection_start == -1)
      replace_all("(^\\> )(.*)$", "\\2", "regex")
  else
      replace_in_selection("(^\\> )(.*)$", "\\2", "regex")
  
---
name: Comments>/* Comment */@C@C++@Java@CSS@JavaScript@Lex
input: selection
command: |
  selStart = $selection_start
  selEnd = $selection_end
  replace_range(selStart, selEnd, "/* " get_selection() " */")
  select(selStart, selEnd + 6)
  
---
name: Comments>/* Uncomment */@C@C++@Java@CSS@JavaScript@Lex
input: selection
command: |
  pos = search("(?n\\s*/\\*\\s*)", $selection_start, "regex")
  start = $search_end
  end = search("(?n\\*/\\s*)", $selection_end, "regex", "backward")
  if (pos != $selection_start || end == -1 )
      return
  replace_selection(get_range(start, end))
  select(pos, $cursor)
  
---
name: Comments>// Comment@C@C++@Java@JavaScript
input: selection
command: |
  replace_in_selection("^.*$", "// &", "regex")
  
---
name: Comments>// Uncomment@C@C++@Java@JavaScript
input: selection
command: |
  replace_in_selection("(^[ \\t]*// ?)(.*)$", "\\2", "regex")
  
---
name: Comments># Comment@Perl@Sh Ksh Bash@NEdit Macro@Makefile@Awk@Csh@Python@Tcl
input: selection
command: |
  replace_in_selection("^.*$", "#&", "regex")
  
---
name: Comments># Uncomment@Perl@Sh Ksh Bash@NEdit Macro@Makefile@Awk@Csh@Python@Tcl
input: selection
command: |
  replace_in_selection("(^[ \\t]*#)(.*)$", "\\2", "regex")
  
---
name: Comments>-- Comment@SQL
input: selection
command: |
  replace_in_selection("^.*$", "--&", "regex")
  
---
name: Comments>-- Uncomment@SQL
input: selection
command: |
  replace_in_selection("(^[ \\t]*--)(.*)$", "\\2", "regex")
  
---
name: Comments>! Comment@X Resources
input: selection
command: |
  replace_in_selection("^.*$", "!&", "regex")
  
---
name: Comments>! Uncomment@X Resources
input: selection
command: |
  replace_in_selection("(^[ \\t]*!)(.*)$", "\\2", "regex")
  
---
name: Comments>% Comment@LaTeX
input: selection
command: |
  replace_in_selection("^.*$", "%&", "regex")
  
---
name: Comments>% Uncomment@LaTeX
input: selection
command: |
  replace_in_selection("(^[ \\t]*%)(.*)$", "\\2", "regex")
  
---
name: Comments>Bar Comment@C
input: selection
command: |
  if ($selection_left != -1) {
      dialog("Selection must not be rectangular")
      return
  }
  start = $selection_start
  end = $selection_end-1
  origText = get_range($selection_start, $selection_end-1)
  newText = "/*\n" replace_in_string(get_range(start, end), \
      "^", " * ", "regex") "\n */\n"
  replace_selection(newText)
  select(start, start + length(newText))
  
---
name: Comments>Bar Uncomment@C
input: selection
command: |
  selStart = $selection_start
  selEnd = $selection_end
  pos = search("/\\*\\s*\\n", selStart, "regex")
  if (pos != selStart) return
  start = $search_end
  end = search("\\n\\s*\\*/\\s*\\n?", selEnd, "regex", "backward")
  if (end == -1 || $search_end < selEnd) return
  newText = get_range(start, end)
  newText = replace_in_string(newText,"^ *\\* ?", "", "regex", "copy")
  if (get_range(selEnd, selEnd - 1) == "\n") selEnd -= 1
  replace_range(selStart, selEnd, newText)
  select(selStart, selStart + length(newText))
  
---
name: Make C Prototypes@C@C++
command: |
  # simplistic extraction of C function prototypes, usually good enough
  if ($selection_start == -1) {
      start = 0
      end = $text_length
  } else {
      start = $selection_start
      end = $selection_end
  }
  string = get_range(start, end)
  # remove all C++ and C comments, then all blank lines in the extracted range
  string = replace_in_string(string, "//.*$", "", "regex", "copy")
  string = replace_in_string(string, "(?n/\\*.*?\\*/)", "", "regex", "copy")
  string = replace_in_string(string, "^\\s*\n", "", "regex", "copy")
  nDefs = 0
  searchPos = 0
  prototypes = ""
  staticPrototypes = ""
  for (;;) {
      headerStart = search_string(string, \
          "^[a-zA-Z]([^;#\"'{}=><!/]|\n)*\\)[ \t]*\n?[ \t]*\\{", \
          searchPos, "regex")
      if (headerStart == -1)
          break
      headerEnd = search_string(string, ")", $search_end,"backward") + 1
      prototype = substring(string, headerStart, headerEnd) ";\n"
      if (substring(string, headerStart, headerStart+6) == "static")
          staticPrototypes = staticPrototypes prototype
      else
          prototypes = prototypes prototype
      searchPos = headerEnd
      nDefs++
  }
  if (nDefs == 0) {
      dialog("No function declarations found")
      return
  }
  new()
  focus_window("last")
  replace_range(0, 0, prototypes staticPrototypes)
  

